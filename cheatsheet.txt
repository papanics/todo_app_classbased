https://www.dennisivy.com/post/django-class-based-views/

Start a new project
1. virtualenv env - create a virtual environment
    -env\Scripts\activate -> activate virtual environment
    -pip install django
2. django-admin startproject todo_proj - create a project
3 .python manage.py startapp todo_app - create an app

4. add the new app to the settings.py installed_apps
 -ex: INSTALLED_APPS = [    
    'todo_app.apps.TodoAppConfig',
]
5. add a urls.py to the created app
    from django.urls import path
    from . import views

    urlpatterns = [
        path('', views.taskList, name='tasks'),
    ]

6. add this to views.py.
    from django.shortcuts import render
    from django.http import HttpResponse

    def taskList(request):
        return HttpResponse('To Do list')

7. add this to project's urls.py
from django.contrib import admin
from django.urls import path, include


urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('todo_app.urls'))
]

8. setting up the models
9. add the model created to the apps>admin.py
from .models import Task

admin.site.register(Task)

NOTES:

template_name: By default the ListView Looks for a template with the prefix of the model name (task) and the suffix of _list.html
 if not otherwise set (task_list.html). This can be overridden by setting the “template_name” attribute.

context_object_name: Override the default queryset name of “object_list” by setting the “context_object_name” attribute.
 It helps to have a more user friendly name to work with besides just “object_list”.

paginate_by & ordering: The list view also has pagination and ordering already built in. 
We can set these methods by setting their attributes like I did in the code example above.